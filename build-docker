#!/bin/bash

CWD="$(pwd)"
ARGUMENTS="$@"

DOCKER="docker"
set +e
# $DOCKER ps >/dev/null 2>&1
# if [ $? != 0 ]; then
#   DOCKER="sudo docker"
# fi
if ! $DOCKER ps >/dev/null; then
  echo "error connecting to docker:"
  $DOCKER ps
  exit 1
fi
set -e

set -o errexit -o pipefail -o noclobber -o nounset

INPUT=input
OUTPUT=output
NAME=name
ARCH=name
INPUT_NAME=name

NEXT_ARGUMENTS=""
while true; do
  if [ "$#" == "0" ]
  then break
  fi

  case "$1" in
    -d|--docker)
      shift
      ;;
    -i|--input)
      INPUT="$2"
      INPUT_NAME="$(basename "$2")"
      NEXT_ARGUMENTS="${NEXT_ARGUMENTS} $(echo -n "--input input")"
      shift 2
      ;;
    -o|--output)
      OUTPUT="$2"
      NEXT_ARGUMENTS="${NEXT_ARGUMENTS} $(echo -n "--output output")"
      shift 2
      ;;
    -n|--name)
      NAME="$2"
      NEXT_ARGUMENTS="${NEXT_ARGUMENTS} $(echo -n "$1" "$2")"
      shift 2
      ;;
    -a|--arch)
      ARCH="$2"
      NEXT_ARGUMENTS="${NEXT_ARGUMENTS} $(echo -n "$1" "$2")"
      shift 2
      ;;
    *)
      NEXT_ARGUMENTS="${NEXT_ARGUMENTS} $(echo -n "$1")"
      shift
      ;;
  esac
done
if [ "${NAME}" == "name" ]
then
  NAME="${INPUT_NAME}"
fi
NEXT_ARGUMENTS="${NEXT_ARGUMENTS} $(echo -n "--name ${NAME}")"

IMAGE_NAME=${IMAGE_NAME:-debian_nodejs_package_builder}
CONTAINER_NAME=${CONTAINER_NAME:-debian_nodejs_package_builder_${ARCH}_work}
PRESERVE_CONTAINER=0
CONTAINER_EXISTS=$($DOCKER ps -a --filter name="$CONTAINER_NAME" -q)
CONTAINER_RUNNING=$($DOCKER ps --filter name="$CONTAINER_NAME" -q)

if [ "$CONTAINER_RUNNING" != "" ]; then
  echo "The build is already running in container $CONTAINER_NAME. Aborting."
  exit 1
fi
if [ "$CONTAINER_EXISTS" != "" ]; then
  $DOCKER rm -v "${CONTAINER_NAME}"
fi

docker run --rm --privileged multiarch/qemu-user-static:register --reset

$DOCKER build -t debian_nodejs_package_builder --build-arg ARCH=${ARCH} .

echo $INPUT
trap "echo 'got CTRL+C... please wait 5s'; $DOCKER stop -t 5 ${CONTAINER_NAME}" SIGINT SIGTERM
$DOCKER create --name "${CONTAINER_NAME}" --privileged \
  ${IMAGE_NAME} \
  bash -e -o errexit -o pipefail -o noclobber -o nounset -c "
    cd /app; ./build ${NEXT_ARGUMENTS};
  "
$DOCKER cp "${CWD}/${INPUT}/." "${CONTAINER_NAME}":/app/input
$DOCKER start "${CONTAINER_NAME}"
time $DOCKER logs "${CONTAINER_NAME}" --follow || true &
wait "$!"

echo "copying results from output/"
$DOCKER cp "${CONTAINER_NAME}":/app/output/. "${OUTPUT}"
ls -lah output

# cleanup
if [ "$PRESERVE_CONTAINER" != "1" ]; then
  $DOCKER rm -v $CONTAINER_NAME
fi

echo "Done! Your image(s) should be in output/"

